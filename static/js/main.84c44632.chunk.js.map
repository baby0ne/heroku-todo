{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/Login/authReducer.ts","features/TodolistsList/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","params","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isLoggedIn","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","isInitialized","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","display","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84c44632.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n   withCredentials: true,\r\n   headers: {\r\n      'API-KEY': 'd792a140-f8e0-4f3b-ad2c-4b97a9210dfa'\r\n   }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n   getTodolists() {\r\n      return instance.get<TodolistType[]>('todo-lists');\r\n   },\r\n   createTodolist(title: string) {\r\n      return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', { title });\r\n   },\r\n   deleteTodolist(id: string) {\r\n      return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n   },\r\n   updateTodolist(id: string, title: string) {\r\n      return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, { title });\r\n   },\r\n   getTasks(todolistId: string) {\r\n      return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n   },\r\n   deleteTask(todolistId: string, taskId: string) {\r\n      return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n   },\r\n   createTask(todolistId: string, title: string) {\r\n      return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, { title });\r\n   },\r\n   updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n      return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n   }\r\n}\r\n\r\nexport const authAPI = {\r\n   me() {\r\n      return instance.get<ResponseType<{\r\n         id: number\r\n         email: string\r\n         login: string\r\n      }>>('/auth/me');\r\n   },\r\n   login(params: LoginParamsType) {\r\n      return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', params);\r\n   },\r\n   logout() {\r\n      return instance.delete<ResponseType>('/auth/login');\r\n   }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n   id: string\r\n   title: string\r\n   addedDate: string\r\n   order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n   resultCode: number\r\n   messages: Array<string>\r\n   fieldsErrors: Array<string>\r\n   data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n   New = 0,\r\n   InProgress = 1,\r\n   Completed = 2,\r\n   Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n   Low = 0,\r\n   Middle = 1,\r\n   Hi = 2,\r\n   Urgently = 3,\r\n   Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n   description: string\r\n   title: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n   id: string\r\n   todoListId: string\r\n   order: number\r\n   addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n   title: string\r\n   description: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n   error: string | null\r\n   totalCount: number\r\n   items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n   captcha?: string\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n   switch (action.type) {\r\n      case 'REMOVE-TASK':\r\n         return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n      case 'ADD-TASK':\r\n         return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n      case 'UPDATE-TASK':\r\n         return {\r\n            ...state,\r\n            [action.todolistId]: state[action.todolistId]\r\n               .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n         }\r\n      case 'ADD-TODOLIST':\r\n         return { ...state, [action.todolist.id]: [] }\r\n      case 'REMOVE-TODOLIST':\r\n         const copyState = { ...state }\r\n         delete copyState[action.id]\r\n         return copyState\r\n      case 'SET-TODOLISTS': {\r\n         const copyState = { ...state }\r\n         action.todolists.forEach(tl => {\r\n            copyState[tl.id] = []\r\n         })\r\n         return copyState\r\n      }\r\n      case 'SET-TASKS':\r\n         return { ...state, [action.todolistId]: action.tasks }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) => ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n   type: 'UPDATE-TASK',\r\n   model,\r\n   todolistId,\r\n   taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n   type: 'SET-TASKS',\r\n   tasks,\r\n   todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   todolistsAPI.getTasks(todolistId)\r\n      .then((res) => {\r\n         const tasks = res.data.items\r\n         dispatch(setTasksAC(tasks, todolistId))\r\n         dispatch(setAppStatusAC('succeeded'))\r\n      })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n   todolistsAPI.deleteTask(todolistId, taskId)\r\n      .then(res => {\r\n         const action = removeTaskAC(taskId, todolistId)\r\n         dispatch(action)\r\n      })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   todolistsAPI.createTask(todolistId, title)\r\n      .then(res => {\r\n         if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            const action = addTaskAC(task)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n         } else {\r\n            handleServerAppError(res.data, dispatch);\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         handleServerNetworkError(error, dispatch)\r\n      })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n   (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n      const state = getState()\r\n      const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n      if (!task) {\r\n         //throw new Error(\"task not found in the state\");\r\n         console.warn('task not found in the state')\r\n         return\r\n      }\r\n\r\n      const apiModel: UpdateTaskModelType = {\r\n         deadline: task.deadline,\r\n         description: task.description,\r\n         priority: task.priority,\r\n         startDate: task.startDate,\r\n         title: task.title,\r\n         status: task.status,\r\n         ...domainModel\r\n      }\r\n\r\n      todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n         .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n               const action = updateTaskAC(taskId, domainModel, todolistId)\r\n               dispatch(action)\r\n            } else {\r\n               handleServerAppError(res.data, dispatch);\r\n            }\r\n         })\r\n         .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n         })\r\n   }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n   title?: string\r\n   description?: string\r\n   status?: TaskStatuses\r\n   priority?: TaskPriorities\r\n   startDate?: string\r\n   deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n   [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n   | ReturnType<typeof removeTaskAC>\r\n   | ReturnType<typeof addTaskAC>\r\n   | ReturnType<typeof updateTaskAC>\r\n   | AddTodolistActionType\r\n   | RemoveTodolistActionType\r\n   | SetTodolistsActionType\r\n   | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n   addTodolistTC,\r\n   changeTodolistFilterAC,\r\n   changeTodolistTitleTC,\r\n   fetchTodolistsTC,\r\n   FilterValuesType,\r\n   removeTodolistTC,\r\n   TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n   demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n   const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n   const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n   const dispatch = useDispatch()\r\n\r\n   useEffect(() => {\r\n      if (demo || !isLoggedIn) {\r\n         return;\r\n      }\r\n      const thunk = fetchTodolistsTC()\r\n      dispatch(thunk)\r\n   }, [])\r\n\r\n   const removeTask = useCallback(function (id: string, todolistId: string) {\r\n      const thunk = removeTaskTC(id, todolistId)\r\n      dispatch(thunk)\r\n   }, [])\r\n\r\n   const addTask = useCallback(function (title: string, todolistId: string) {\r\n      const thunk = addTaskTC(title, todolistId)\r\n      dispatch(thunk)\r\n   }, [])\r\n\r\n   const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n      const thunk = updateTaskTC(id, { status }, todolistId)\r\n      dispatch(thunk)\r\n   }, [])\r\n\r\n   const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n      const thunk = updateTaskTC(id, { title: newTitle }, todolistId)\r\n      dispatch(thunk)\r\n   }, [])\r\n\r\n   const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n      const action = changeTodolistFilterAC(todolistId, value)\r\n      dispatch(action)\r\n   }, [])\r\n\r\n   const removeTodolist = useCallback(function (id: string) {\r\n      const thunk = removeTodolistTC(id)\r\n      dispatch(thunk)\r\n   }, [])\r\n\r\n   const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n      const thunk = changeTodolistTitleTC(id, title)\r\n      dispatch(thunk)\r\n   }, [])\r\n\r\n   const addTodolist = useCallback((title: string) => {\r\n      const thunk = addTodolistTC(title)\r\n      dispatch(thunk)\r\n   }, [dispatch])\r\n\r\n   if (!isLoggedIn) {\r\n      return <Navigate to='/login' />\r\n   }\r\n\r\n   return <>\r\n      <Grid container style={{ padding: '20px' }}>\r\n         <AddItemForm addItem={addTodolist} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n         {\r\n            todolists.map(tl => {\r\n               let allTodolistTasks = tasks[tl.id]\r\n\r\n               return <Grid item key={tl.id}>\r\n                  <Paper style={{ padding: '10px' }}>\r\n                     <Todolist\r\n                        todolist={tl}\r\n                        tasks={allTodolistTasks}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        demo={demo}\r\n                     />\r\n                  </Paper>\r\n               </Grid>\r\n            })\r\n         }\r\n      </Grid>\r\n   </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport { authAPI, LoginParamsType } from '../../../api/todolists-api';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../../utils/error-utils';\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from './../../../app/app-reducer';\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   isInitialized: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'login/SET-IS-LOGGED-IN':\r\n         return { ...state, isLoggedIn: action.value };\r\n      case 'login/SET-IS-INITIALIZED':\r\n         return { ...state, isInitialized: action.value };\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({ type: 'login/SET-IS-LOGGED-IN', value } as const);\r\nexport const setIsInitializedAC = (value: boolean) => ({ type: 'login/SET-IS-INITIALIZED', value } as const);\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   authAPI.login(data)\r\n      .then(res => {\r\n         if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n         } else {\r\n            handleServerAppError(res.data, dispatch);\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         handleServerNetworkError(error, dispatch);\r\n      })\r\n};\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   authAPI.logout()\r\n      .then(res => {\r\n         if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n         } else {\r\n            handleServerAppError(res.data, dispatch);\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         handleServerNetworkError(error, dispatch);\r\n      })\r\n};\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   authAPI.me()\r\n      .then(res => {\r\n         dispatch(setIsInitializedAC(true));\r\n\r\n         if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n         } else {\r\n            handleServerAppError(res.data, dispatch);\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         handleServerNetworkError(error, dispatch);\r\n      })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType =\r\n   ReturnType<typeof setIsLoggedInAC>\r\n   | SetAppStatusActionType\r\n   | SetAppErrorActionType\r\n   | ReturnType<typeof setIsInitializedAC>;\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useFormik } from 'formik';\r\nimport { loginTC } from './authReducer';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../../app/store';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n   email?: string\r\n   password?: string\r\n   rememberMe?: boolean\r\n}\r\n\r\nexport const Login = React.memo(() => {\r\n   const dispatch = useDispatch();\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false,\r\n      },\r\n      validate: values => {\r\n         const errors: FormikErrorType = {};\r\n         if (!values.email) {\r\n            errors.email = 'Required';\r\n         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n         }\r\n         if (!values.password) {\r\n            errors.password = 'Required';\r\n         } else if (values.password.length < 8) {\r\n            errors.password = 'Password is too short';\r\n         }\r\n         return errors;\r\n      },\r\n      onSubmit: values => {\r\n         const params = {\r\n            email: values.email,\r\n            password: values.password,\r\n            rememberMe: values.rememberMe,\r\n         };\r\n         dispatch(loginTC(params));\r\n         formik.resetForm();\r\n      },\r\n   });\r\n\r\n   if (isLoggedIn) {\r\n      return <Navigate to='/' />\r\n   }\r\n\r\n   return <Grid container justifyContent={'center'}>\r\n      <Grid item justifyContent={'center'}>\r\n         <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n               <FormLabel>\r\n                  <p>To log in get registered\r\n                     <a href={'https://social-network.samuraijs.com/'}\r\n                        target={'_blank'}> here\r\n                     </a>\r\n                  </p>\r\n                  <p>or use common test account credentials:</p>\r\n                  <p>Email: free@samuraijs.com</p>\r\n                  <p>Password: free</p>\r\n               </FormLabel>\r\n               <FormGroup>\r\n                  <TextField\r\n                     label='Email'\r\n                     margin='normal'\r\n                     {...formik.getFieldProps('email')}\r\n                  />\r\n                  {formik.touched.email && formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n                  <TextField\r\n                     type='password'\r\n                     label='Password'\r\n                     margin='normal'\r\n                     {...formik.getFieldProps('password')}\r\n                  />\r\n                  {formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n                  <FormControlLabel\r\n                     label={'Remember me'}\r\n                     control={\r\n                        <Checkbox\r\n                           {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                     }\r\n                  />\r\n                  <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                     Login\r\n                  </Button>\r\n               </FormGroup>\r\n            </FormControl>\r\n         </form>\r\n      </Grid>\r\n   </Grid>\r\n});","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { RequestStatusType } from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { Login } from '../features/TodolistsList/Login/Login'\r\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom'\r\nimport { initializeAppTC, logoutTC } from '../features/TodolistsList/Login/authReducer'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\n\r\ntype PropsType = {\r\n   demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n   const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status);\r\n   const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.auth.isInitialized);\r\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n   const dispatch = useDispatch();\r\n\r\n   useEffect(() => {\r\n      dispatch(initializeAppTC());\r\n   }, []);\r\n\r\n   const onClickHandler = () => {\r\n      dispatch(logoutTC())\r\n   }\r\n\r\n   if (!isInitialized) {\r\n      return <div\r\n         style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n         <CircularProgress />\r\n      </div>\r\n   }\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <BrowserRouter>\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n               <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                  <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                     <Menu />\r\n                  </IconButton>\r\n                  <Typography variant=\"h6\">\r\n                     Todolist\r\n                  </Typography>\r\n                  <Button color=\"inherit\"\r\n                     onClick={onClickHandler}\r\n                  >{isLoggedIn ? 'Logout' : 'Login'}</Button>\r\n               </Toolbar>\r\n               {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n               <Routes>\r\n                  <Route path={'/'} element={<TodolistsList demo={demo} />} />\r\n                  <Route path={'/login'} element={<Login />} />\r\n                  <Route path={'/404'} element={<h1> 404 page not found </h1>} />\r\n                  <Route path={'*'} element={<Navigate to={'/404'} />} />\r\n               </Routes>\r\n            </Container>\r\n         </BrowserRouter>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default App;","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport { authReducer } from '../features/TodolistsList/Login/authReducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todolistsReducer,\r\n   app: appReducer,\r\n   auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}